#!/bin/bash
name="Robin V"
webdir="$PWD"
website="https://sommarflÃ¶rten.com/" # Keep a trailing slash. Should be your domain e.g "https://Lukesmith.xyz/ or this if you want to try it with atom-live-server
css="../style.css"
blogfile="Html/Avsnitt.html"
indexfile="blogindex.html"
rssfile="rss.xml"
archivefile="$webdir/blog/.htaccess"
#podfile="$webdir/blog/.podfile"
audiodir="audio"
torrentdir="torrent"
coverdir="img/coverart"
smallcoverdir="img/smallcoverart"
[ -z "$EDITOR" ] && EDITOR="vim"

[ ! -d "$webdir/blog/.drafts" ] &&
read -erp "Initialize blog in $webdir?" ask &&
	if [ "$ask" = "y" ]; then
	printf "Initializing blog system...\\n"
	mkdir -pv "$webdir/blog/.drafts" || printf "Error. Do you have write permissions in this directory?\\n"
	#touch "$podfile" || printf "Error. Do you have write permissions to this directory?\\n"

	mkdir -pv "$webdir/$audiodir" || printf "Error. Do you have write permissions in this directory?\\n"

	mkdir -pv "$webdir/$torrentdir" || printf "Error. Do you have write permissions in this directory?\\n"

	mkdir -pv "$webdir/$coverdir" || printf "Error. Do you have write permissions in this directory?\\n"

	mkdir -pv "$webdir/$smallcoverdir" || printf "Error. Do you have write permissions in this directory?\\n"

	echo "Options +Indexes" > "$archivefile"
else
	exit
fi

newpost() { read -erp "Give a title for your post/episode:
	" title
	echo "$title" | grep -q "\"" && printf "Double quotation marks (\") are not allowed in entry titles.\\n" && exit

	read -erp "Enter episode number: (e.g 1):
	" episode
	echo "$episode" | grep -q "\"" && printf "Double quotation marks (\") are not allowed in audo files.\\n" && exit

	read -erp "Enter season number: (e.g 1):
	" season
	echo "$season" | grep -q "\"" && printf "Double quotation marks (\") are not allowed in audo files.\\n" && exit

	read -erp "Enter the name of your audio file: (e.g My-Podcast.mp3):
	" audiofile
	echo "$audiofile" | grep -q "\"" && printf "Double quotation marks (\") are not allowed in audo files.\\n" && exit

	read -erp "Enter the name of your .torrent file: (e.g My-Podcast.torrent):
	" torrentfile
	echo "$torrentfile" | grep -q "\"" && printf "Double quotation marks (\") are not allowed in torrent files.\\n" && exit

	read -erp "Give the episode a short description:
	" shortdesc
	echo "$shortdesc" | grep -q "\"" && printf "Double quotation marks (\") are not allowed in short descriptions.\\n" && exit

	read -erp "Enter the name of your image file: (e.g My-Podcast.jpg):
        ***Cover must be a minimum of 1400x1400 pixels in accordance with standards***
	***Small covers can be any size but should be under 100kb and have the same name***
	" cover
	echo "$cover" | grep -q "\"" && printf "Double quotation marks (\") are not allowed in entry titles.\\n" && exit

	read -erp "Lenght of episode in seconds (e.g 3000):
	" duration
	echo "$duration" | grep -q "\"" && printf "Double quotation marks (\") are not allowed in durations. Should be numbers only.\\n" && exit

	#$duration="ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 audio/$audiofile" || printf "Error. Do you have ffprobe (ffmpeg) installed?" && exit


	url="$(echo "$title" | iconv -cf UTF-8 -t ASCII//TRANSLIT | tr -d '[:punct:]' | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed "s/-\+/-/g;s/\(^-\|-\$\)//g")"

	echo "AddDescription \"$title\" \"$torrentfile\" \"$shortdesc\" \"$audiofile\" \"$duration\" \"$cover\" \"$episode\" \"$season\" \"$url.html\" " >>  "$archivefile"|| { echo "Error: Is $archivefile writeable?"; exit; }
	( [ -f "$webdir/blog/.drafts/$url.html" ] || [ -f "$webdir/blog/$url.html" ] ) && echo "There is already an existing draft or post of that same name/URL." && exit

	printf "<a href='%s%s/%s'>Download</a>\\n<a href='%s%s/%s'>Torrent</a>\\n<img src='%s%s/%s'>\\n<p>%s</p>" "$website" "$audiodir" "$audiofile" "$website" "$torrentdir" "$torrentfile" "$website" "$smallcoverdir" "$cover" "$shortdesc" > "$webdir/blog/.drafts/$url.html"

	$EDITOR "$webdir/blog/.drafts/$url.html" ;
}

listandReturn() {
	printf "Listing contents of %s\\n" "$1"
	case "$(ls "$1" | wc -l)" in
		0) echo "There's nothing to $2." && exit 1 ;;
		1) number=1 && printf "There's only one entry to %s.\\nDefaulting selection to %s\\n" "$2" "$(ls -rc "$1" | awk -F '/' '{print $NF}')" ;;
		*) ls -rc "$1" | awk -F '/' '{print $NF}' | nl
                read -erp "Pick an entry by number to $2, or press Ctrl-C to cancel. " number ;;
	esac
	chosen="$(ls -rc "$1" | nl | grep -w " $number" | awk '{print $2}')"
	basefile="$(basename "$chosen")" && base="${basefile%.*}"
}

publish() { \
	delete draft
	htaccessentry=$(grep "$basefile" "$archivefile")
	realname="$(echo "$htaccessentry" | cut -d'"' -f2)"
	torrentfile="$(echo "$htaccessentry" | cut -d'"' -f4)"
	shortdesc="$(echo "$htaccessentry" | cut -d'"' -f6)"
	audiofile="$(echo "$htaccessentry" | cut -d'"' -f8)"
	duration="$(echo "$htaccessentry" | cut -d'"' -f10)"
	cover="$(echo "$htaccessentry" | cut -d'"' -f12)"
	episode="$(echo "$htaccessentry" | cut -d'"' -f14)"
	season="$(echo "$htaccessentry" | cut -d'"' -f16)"
	enclosure_length="$(stat -c %s $audiodir/$audiofile)"
	rssdate="$(grep "$basefile" blog/.htaccess | sed "s/.*\.html\"* *#*//g" | tr -d '\n')"
	[ -z "$rssdate" ] && rssdate="$(LC_TIME=en_US date '+%a, %d %b %Y %H:%M:%S %z')" # RSS date formats must comply with standards to validate.
	webdate="$(date '+%a, %d %b %Y %H:%M:%S %z')" # But this visible date you can set to any format.
	tmpdir=$(mktemp -d)
	printf "<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n<title>%s</title>\\n<link rel='stylesheet' type='text/css' href='%s'>\\n<meta charset='utf-8'/>\\n</head>\\n<body>\\n<h1>%s</h1>\\n<small>[<a href='%s#%s'>link</a>&mdash;<a href='%s'>standalone</a>]</small>\\n%s\\n<footer>by <strong><a href='%s'>%s</a></strong></footer>\\n</body>\\n\\n</html>" "$realname" "$css" "$realname" "../$blogfile" "$base" "$basefile" "$(cat "$webdir/blog/.drafts/$basefile")" "$website" "$name" > "$webdir/blog/$basefile"
printf "\\n<item>\\n<title>%s</title>\\n<guid isPermaLink=\"true\">%s%s/%s</guid>\\n<pubDate>%s</pubDate>\\n<description><![CDATA[\\n<p>%s</p>\\n]]></description>\\n<content:encoded><![CDATA[\\n%s\\n]]></content:encoded>\\n<enclosure length=\"%s\" type=\"audio/mpeg\" url=\"%s%s/%s\" />\\n<itunes:episodeType>full</itunes:episodeType>\\n<itunes:duration>%s</itunes:duration>\\n</item>\\n\\n" "$realname" "$website" "$audiodir" "$audiofile" "$rssdate" "$shortdesc" "$(cat "$webdir/blog/.drafts/$basefile")" "$enclosure_length" "$website" "$audiodir" "$audiofile" "$duration" >  "$tmpdir/rss"
	printf "<div class='entry'>\\n<h2 id='%s'>%s</h2>\\n<small>[<a href='#%s'>link</a>&mdash;<a href='%s'>standalone</a>]</small>\\n%s\\n<small>%s</small>\\n</div>\\n" "$base" "$realname" "$base" "blog/$basefile" "$(cat "$webdir/blog/.drafts/$basefile")" "$webdate" > "$tmpdir/html"
	printf "<li>%s &ndash; <a href=\"blog/%s\">%s</a></li>\\n" "$(date '+%Y %b %d')" "$basefile" "$realname" > "$tmpdir/index"
	sed -i "/<!-- LBP -->/r $tmpdir/html" "$blogfile"
	sed -i "/<!-- LBP -->/r $tmpdir/rss" "$rssfile"
	sed -i "/<!-- LBP -->/r $tmpdir/index" "$indexfile"
		sed -i "/ \"$base.html\"/d" "$archivefile" #deletes old archivefile entry
		echo "AddDescription \"$realname\" \"$torrentfile\" \"$shortdesc\" \"$audiofile\" \"$duration\" \"$cover\" \"$episode\" \"$season\" \"$basefile\" #$rssdate" >> "$archivefile" #adds new archivefile entry, with datea
		rm -f "$webdir/blog/.drafts/$chosen"
	}

	confirm() { read -erp "Really $1 \"$base\"? (y/N) " choice && echo "$choice" | grep -qi "^y$" || exit 1 ;}

	delete() { \
		sed -i "/<item/{:a;N;/<\\/item>/!ba};/#$base<\\/guid/d" "$rssfile"
		sed -i "/<div class='entry'>/{:a;N;/<\\/div>/!ba};/id='$base'/d" "$blogfile"
	sed -i "/<li>.*<a href=\"blog\\/$base.html\">/d" "$indexfile"
	rm -f "$webdir/blog/$basefile" && [[ "$1" != "draft" ]] && printf "Old blog entry removed.\\n";}

revise() { awk '/^<small>\[/{flag=1;next}/<footer>/{flag=0}flag' "$webdir/blog/$chosen" > "$webdir/blog/.drafts/$basefile"
	"$EDITOR" "$webdir/blog/.drafts/$basefile"
	printf "Revision stored in blog/.drafts. Publish as normal entry when desired.\\n" ;}

case "$1" in
	n*) newpost ;;
	e*) listandReturn "$webdir"/blog/.drafts/ edit && "$EDITOR" "$webdir/blog/.drafts/$chosen" ;;
	p*) listandReturn "$webdir"/blog/.drafts/ publish && publish ;;
	t*) listandReturn "$webdir"/blog/.drafts/ trash && confirm trash && rm -f "$webdir/blog/.drafts/$chosen" && sed -i "/ \"$base.html\"/d" "$archivefile" ; printf "Draft deleted.\\n" ;;
	d*) listandReturn "$webdir"/blog/ delete && confirm delete && delete && sed -i "/ \"$base.html\"/d" "$archivefile" ;;
	r*) listandReturn "$webdir"/blog/ revise && revise ;;
	*) printf "lbp is a fork of the lb blog system by Luke Smith\\nUsage:\\n  lb n:\\tnew draft\\n  lb e:\\tedit draft\\n  lb p:\\tpublish/finalize draft\\n  lb r:\\trevise published entry\\n  lb t:\\tdiscard draft\\n  lb d:\\tdelete published entry\\n\\nBe sure to have the following pattern added to your RSS feed, blog file and blog index:\\n\\n<!-- LBP -->\\n\\nNew content will be added directly below that sequence. This is required.\\nSee https://github.com/LukeSmithxyz/lb for more.\\n" ;;
esac
